import asyncio
from asyncio import Lock
import asyncpg
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from dotenv import load_dotenv
import uuid
import os
import logging

logging.basicConfig(level=logging.DEBUG)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

db_lock = Lock()

db_pool2 = None


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É–ª–∞
async def log_pool_state():
    try:
        active_connections = len(db_pool2._holders)  # –ó–∞–Ω—è—Ç—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        free_connections = db_pool2._queue.qsize()  # –°–≤–æ–±–æ–¥–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        logging.info(
            f"–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π db_pool2: –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {active_connections}, –°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {free_connections}"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É–ª–∞ db_pool2: {e}")


DATABASE_URL = os.getenv("DATABASE_URL")
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = os.getenv("GROUP_ID")
TABLE_NAME = os.getenv("TABLE_NAME", "p_of_light")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async def get_db_pool2():
    try:
        if not DATABASE_URL:
            raise ValueError("DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω–∞.")

        return await asyncpg.create_pool(DATABASE_URL, max_size=10)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Ç–æ–ø–∏–∫–∞
async def register_user(telegram_id):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤–∞—è –∞–Ω–æ–Ω–∏–º–Ω—ã–π ID –∏ —Ç–æ–ø–∏–∫ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.
    """
    try:
        logging.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID: {telegram_id}")
        async with db_pool2.acquire() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            result = await conn.fetchrow(
                f"SELECT anon_id, topic_id FROM {TABLE_NAME} WHERE telegram_id = $1",
                telegram_id,
            )
            if result:
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
                return result["anon_id"], result["topic_id"]

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ ID
            anon_id = str(uuid.uuid4())

            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–ø–∏–∫–∞
            topic_title = f"–ß–∞—Ç {anon_id[:4]}"
            topic_result = await bot.create_forum_topic(
                chat_id=GROUP_ID, name=topic_title
            )
            topic_id = topic_result.message_thread_id

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await conn.execute(
                f"INSERT INTO {TABLE_NAME} (telegram_id, anon_id, topic_id) VALUES ($1, $2, $3)",
                telegram_id,
                anon_id,
                topic_id,
            )
            logging.info(
                f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–æ–ø–∏–∫ —Å ID {topic_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}."
            )
            return anon_id, topic_id

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        return None, None


# –ü–æ–ª—É—á–µ–Ω–∏–µ Telegram ID –ø–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–º—É ID
async def get_telegram_id(anon_id):
    async with db_pool2.acquire() as conn:
        result = await conn.fetchrow(
            f"SELECT telegram_id FROM {TABLE_NAME} WHERE anon_id = $1", anon_id
        )
        return result["telegram_id"] if result else None


@dp.message(Command("start"))
async def start_command(message: types.Message):
    if not message.from_user:
        logging.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
        return
    try:
        anon_id, topic_id = await register_user(message.from_user.id)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –≤ –±–∞–∑–µ
        async with db_pool2.acquire() as conn:
            result = await conn.fetchrow(
                f"SELECT id FROM {TABLE_NAME} WHERE telegram_id = $1", message.from_user.id
            )

        if result:
            user_number = result["id"]
            topic_name = f"{user_number}"

        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç üëã! –≠—Ç–æ –±–æ—Ç –ø–æ —Ñ–∏–∑–∏–∫–µ ‚ú®\n –ï—Å–ª–∏...",
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(F.chat.type == "private")
async def handle_user_message(message: types.Message):
    if not message.from_user:
        logging.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
        return
    logging.info(
        f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text or '–º—É–ª—å—Ç–∏–º–µ–¥–∏–∞'}"
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    anon_id, topic_id = await register_user(message.from_user.id)

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏
        user_tag = f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {str(anon_id)[:4]}:"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        if message.text:
            forward_message = f"{user_tag}\n{message.text}"
            await bot.send_message(
                chat_id=GROUP_ID, message_thread_id=topic_id, text=forward_message
            )
        elif message.photo:
            await bot.send_photo(
                chat_id=GROUP_ID,
                message_thread_id=topic_id,
                photo=message.photo[-1].file_id,
                caption=f"{user_tag}\n{message.caption or ''}",
            )
        elif message.video:
            await bot.send_video(
                chat_id=GROUP_ID,
                message_thread_id=topic_id,
                video=message.video.file_id,
                caption=f"{user_tag}\n{message.caption or ''}",
            )
        elif message.document:
            await bot.send_document(
                chat_id=GROUP_ID,
                message_thread_id=topic_id,
                document=message.document.file_id,
                caption=f"{user_tag}\n{message.caption or ''}",
            )
        elif message.audio:
            await bot.send_audio(
                chat_id=GROUP_ID,
                message_thread_id=topic_id,
                audio=message.audio.file_id,
                caption=f"{user_tag}\n{message.caption or ''}",
            )
        elif message.voice:
            await bot.send_voice(
                chat_id=GROUP_ID,
                message_thread_id=topic_id,
                voice=message.voice.file_id,
                caption=user_tag,
            )
        else:
            await bot.send_message(
                chat_id=GROUP_ID,
                message_thread_id=topic_id,
                text=f"{user_tag}\n–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.",
            )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ —Ç–æ–ø–∏–∫.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(F.chat.type.in_(["group", "supergroup"]) & ~F.text.startswith("/"))
async def handle_admin_reply(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Ç–æ–ø–∏–∫–∞—Ö –≥—Ä—É–ø–ø—ã,
    –∏–≥–Ω–æ—Ä–∏—Ä—É—è –∫–æ–º–∞–Ω–¥—ã.
    """
    if not any(
        [
            message.text,
            message.photo,
            message.video,
            message.document,
            message.audio,
            message.voice,
        ]
    ):
        logging.info(f"–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã: {message.text}")
        return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await process_admin_message(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.edited_message(F.chat.type.in_(["group", "supergroup"]))
async def handle_admin_edited_message(message: types.Message):

    topic_id = message.message_thread_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ topic_id –≤ –±–∞–∑–µ
    async with db_pool2.acquire() as conn:
        result = await conn.fetchrow(
            f"SELECT telegram_id FROM {TABLE_NAME} WHERE topic_id = $1", topic_id
        )

    if not result:
        logging.warning(
            f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Ç–æ–ø–∏–∫–µ: {topic_id}. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º."
        )
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await process_admin_message(message)


# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def process_admin_message(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∫ –Ω–æ–≤—ã–µ, —Ç–∞–∫ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    logging.info(
        f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {message.text}, —á–∞—Ç: {message.chat.id}"
    )
    # –ü–æ–ª—É—á–∞–µ–º topic_id –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
    topic_id = message.message_thread_id

    # –ù–∞—Ö–æ–¥–∏–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å —ç—Ç–∏–º topic_id
    async with db_pool2.acquire() as conn:
        result = await conn.fetchrow(
            f"SELECT telegram_id FROM {TABLE_NAME} WHERE topic_id = $1", topic_id
        )

    try:
        telegram_id = result["telegram_id"]

        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if message.photo:
            await bot.send_photo(
                chat_id=telegram_id,
                photo=message.photo[-1].file_id,
                caption=message.caption,
            )
        elif message.video:
            await bot.send_video(
                chat_id=telegram_id,
                video=message.video.file_id,
                caption=message.caption,
            )
        elif message.document:
            await bot.send_document(
                chat_id=telegram_id,
                document=message.document.file_id,
                caption=message.caption,
            )
        elif message.audio:
            await bot.send_audio(
                chat_id=telegram_id,
                audio=message.audio.file_id,
                caption=message.caption,
            )
        elif message.voice:
            await bot.send_voice(
                chat_id=telegram_id,
                voice=message.voice.file_id,
                caption=message.caption,
            )
        elif message.text:
            await bot.send_message(
                chat_id=telegram_id, text=f"\n\n{message.text}"
            )

        logging.info(f"–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {telegram_id}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    global db_pool2
    try:
        db_pool2 = await get_db_pool2()  # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞
        logging.info("–ü—É–ª db_pool2 —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")

        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        async with db_pool2.acquire() as conn:
            await conn.execute("SELECT 1")
            logging.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        await log_pool_state()  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É–ª–∞
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")


if __name__ == "__main__":
    asyncio.run(main())
